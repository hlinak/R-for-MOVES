stop(paste("There is no database:", db_name, sep=""))
return(FALSE)
}
}
#' getMOVESTableS
#' @description Gets the results of a table in a MOVES database.
#'
#' @param dbconn MySQL db connection
#' @param movesdb_name MySQL default database to be updated as string
#'
#' @return Either a dataframe with the result from \code{RMySQL::dbSendQuery()} or FALSE
#' @export
#'
#' @examples
#' getMOVESTableS(dbconn, db_name)
getMOVESTables <- function(dbconn, db_name) {
if(!checkDatabase(dbconn, movesdb_name)) {
warning("Database: ", movesdb_name, " could not be located.")
return(FALSE)
}
return(processGetQuery(dbconn, paste("SHOW TABLES IN", movesdb_name)))
}
#' getMOVESBaseTable
#' @description Gets the results of a table in a MOVES database.
#'
#' @param dbconn MySQL db connection
#' @param movesdb_name MySQL default database to be updated as string
#' @param table_name MySQL table to be updated as string
#'
#' @return Either a dataframe with the result from \code{RMySQL::dbSendQuery()} or FALSE
#' @export
#'
#' @examples
#' getMOVESBaseTable(dbconn, movesdb_name, "sourceusetype")
getMOVESBaseTable <- function(dbconn, movesdb_name, table_name) {
if(!checkDatabase(dbconn, movesdb_name, movesdb_name)) {
warning("Database: ", movesdb_name, " could not be located.")
return(FALSE)
}
if(!checkTable(dbconn, movesdb_name, table_name)) {
warning("Table: ", table_name, " has either not been coded into r4moves or is not a proper MOVES output base.")
return(FALSE)
}
return(processGetQuery(dbconn, queryBuilder(movesdb_name, movesdb_name, c("*"), table_name)))
}
#' getMOVESInputTable
#' @description Gets the results of a table in a MOVES database and all associated lookup tables.
#'
#' @param dbconn MySQL db connection
#' @param movesdb_name MySQL default database to be updated as string
#' @param countydb_name  MySQL county database to be updated as string
#' @param table_name MySQL table to be updated as string
#'
#' @return Either a dataframe with the result from \code{RMySQL::dbSendQuery()} or FALSE
#' @export
#'
#' @examples
#' getMOVESInputTable(dbconn, movesdb_name, countydb_name, "averagespeeddistribution")
#' getMOVESInputTable(dbconn, movesdb_name, countydb_name, "imcoverage")
getMOVESInputTable <- function(dbconn, movesdb_name, countydb_name, table_name) {
if(table_name == "avgspeedstribution") { return(getAverageSpeedDistribution(dbconn, movesdb_name, countydb_name)) }
if(table_name == "avft") { return(getAVFT(dbconn, movesdb_name, countydb_name)) }
if(table_name == "dayvmtfraction") { return(getDayVMTFraction(dbconn, movesdb_name, countydb_name)) }
if(table_name == "fuelformulation") { return(getFuelFormulation(dbconn, movesdb_name, countydb_name)) }
if(table_name == "fuelsupply") { return(getFuelSupply(dbconn, movesdb_name, countydb_name)) }
if(table_name == "fuelusagefraction") { return(getFuelUsageFraction(dbconn, movesdb_name, countydb_name)) }
if(table_name == "hotelingactivitydistribution") { return(getHotellingActivityDistribution(dbconn, movesdb_name, countydb_name)) }
if(table_name == "hourvmtfraction") { return(getHourVMTFraction(dbconn, movesdb_name, countydb_name)) }
if(table_name == "hpmsvtypeyear") { return(getHPMSVtypeYear(dbconn, movesdb_name, countydb_name)) }
if(table_name == "imcoverage") { return(getIMCoverage(dbconn, movesdb_name, countydb_name)) }
if(table_name == "month") { return(getMonth(dbconn, movesdb_name, countydb_name)) }
if(table_name == "monthvmtfraction") { return(getMonthVMTFraction(dbconn, movesdb_name, countydb_name)) }
if(table_name == "onroadretrofit") { return(getOnRoadRetrofit(dbconn, movesdb_name, countydb_name)) }
if(table_name == "opmodedistribution") { return(getOpModeDistribution(dbconn, movesdb_name, countydb_name)) }
if(table_name == "roadtypedistribution") { return(getRoadTypeDistribution(dbconn, movesdb_name, countydb_name)) }
if(table_name == "sourcetypeagedistribution") { return(getSourceTypeAgeDistribution(dbconn, movesdb_name, countydb_name)) }
if(table_name == "sourcetypedayvmt") { return(getSourceTypeDayVMT(dbconn, movesdb_name, countydb_name)) }
if(table_name == "sourcetypeyear") { return(getSourceTypeYear(dbconn, movesdb_name, countydb_name)) }
if(table_name == "sourcetypeyearvmt") { return(getSourceTypeYearVMT(dbconn, movesdb_name, countydb_name)) }
if(table_name == "startssourcetypefraction") { return(getStartsSourceTypeFraction(dbconn, movesdb_name, countydb_name)) }
warning("Table: ", table_name, " has either not been coded into r4moves or is not a proper MOVES input table.")
return(FALSE)
}
#' getMOVESOutputTable
#' @description Gets the results of a table in a MOVES database and all associated lookup tables.
#'
#' @param dbconn MySQL db connection
#' @param movesdb_name MySQL default database to be updated as string
#' @param outputdb_name  MySQL output database to be updated as string
#' @param table_name MySQL table to be updated as string
#'
#' @return Either a dataframe with the result from \code{RMySQL::dbSendQuery()} or FALSE
#' @export
#'
#' @examples
#' getMOVESOutputTable(dbconn, movesdb_name, outputdb_name, "movesoutput")
#' getMOVESOutputTable(dbconn, movesdb_name, outputdb_name, "rateperdistance")
getMOVESOutputTable <- function(dbconn, movesdb_name, outputdb_name, table_name) {
if(table_name == "activitytype") { return(getActivityType(dbconn, movesdb_name, outputdb_name)) }
if(table_name == "baserateoutput") { return(getBaseRateOutput(dbconn, movesdb_name, outputdb_name)) }
if(table_name == "baserateunits") { return(getBaseRateUnits(dbconn, movesdb_name, outputdb_name)) }
if(table_name == "movesactivity") { return(getMOVESActivityOutput(dbconn, movesdb_name, outputdb_name)) }
if(table_name == "moveserror") { return(getMOVESError(dbconn, movesdb_name, outputdb_name)) }
if(table_name == "moveseventlog") { return(getMOVESEventLog(dbconn, movesdb_name, outputdb_name)) }
if(table_name == "movesoutput") { return(getMOVESOutput(dbconn, movesdb_name, outputdb_name)) }
if(table_name == "movesrun") { return(getMOVESRun(dbconn, movesdb_name, outputdb_name)) }
if(table_name == "movestablesused") { return(getMOVESTablesUsed(dbconn, movesdb_name, outputdb_name)) }
if(table_name == "movesworkersused") { return(getMOVESWorkersUsed(dbconn, movesdb_name, outputdb_name)) }
if(table_name == "rateperdistance") { return(getRatePerDistance(dbconn, movesdb_name, outputdb_name)) }
if(table_name == "rateperhour") { return(getRatePerHour(dbconn, movesdb_name, outputdb_name)) }
if(table_name == "rateperprofile") { return(getRatePerProfile(dbconn, movesdb_name, outputdb_name)) }
if(table_name == "rateperstart") { return(getRatePerStart(dbconn, movesdb_name, outputdb_name)) }
if(table_name == "ratepervehicle") { return(getRatePerVehicle(dbconn, movesdb_name, outputdb_name)) }
if(table_name == "startspervehicle") { return(getStartsPerVehicle(dbconn, movesdb_name, outputdb_name)) }
warning("Table: ", table_name, " has either not been coded into r4moves or is not a proper MOVES output table.")
return(FALSE)
}
#county db tables
getAVFT <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name, "avft")) { return(FALSE) }
return(processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name, c("modelYearID", "fuelEngFraction"), "avft", c("enginetech","fueltype","sourceusetype"), c("engTechID","fuelTypeID","sourceTypeID"))))
}
getAverageSpeedDistribution <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"avgspeeddistribution")) { return(FALSE) }
return(processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("avgSpeedFraction"),"avgspeeddistribution",c("hourday","avgspeedbin","roadtype","sourceusetype"),c("hourDayID","avgSpeedBinID","roadTypeID","sourceTypeID"),c("hourday","sourceusetype"),c("dayofanyweek","hpmsvtype"),c("dayID","HPMSVtypeID"))))
}
getDayVMTFraction <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"dayvmtfraction")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("dayVMTFraction"),"dayvmtfraction",c("dayofanyweek","monthofanyyear","roadtype","sourceusetype"),c("dayID","monthID", "roadTypeID","sourceTypeID"))))
}
getFuelFormulation <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"fuelformulation")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("fuelFormulationID", "RVP", "sulfurLevel", "ETOHVolume", "MTBEVolume", "ETBEVolume", "TAMEVolume", "aromaticContent", "olefinContent", "benzeneContent", "e200", "e300", "volToWtPercentOxy", "BioDieselEsterVolume", "CetaneIndex", "PAHContent", "T50", "T90"),"fuelformulation",c("fuelsubtype"),c("fuelSubTypeID"),c("fuelsubtype"),c("fueltype"),c("fuelTypeID"))))
}
getFuelSupply <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"fuelsupply")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("monthGroupID", "fuelRegionID","marketShare", "marketShareCV"),"fuelsupply",c("fuelformulation"),c("fuelFormulationID"))))
}
getFuelUsageFraction <- function(dbconn, movesdb_name, countydb_name) {
#jmj this one might not be able to rely on query builder to be done properly since the join table columns aren't identical between tables
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"fuelusagefraction")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("fuelYearID", "sourceBinFuelTypeID", "fuelSupplyFuelTypeID","usageFraction"),"fuelusagefraction",c("county","modelyeargroup"),c("countyID","modelYearGroupID"))))
}
getHotellingActivityDistribution <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"hotellingactivitydistribution")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("beginModelYearID", "endModelYearID","opModeFraction"),"hotellingactivitydistribution",c("operatingmode"),c("opModeID"))))
}
getHourVMTFraction <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"hourvmtfraction")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("hourID","hourVMTFraction"),"hourvmtfraction",c("dayofanyweek","roadtype","sourceusetype"),c("dayID","roadTypeID","sourceTypeID"))))
}
getHPMSVtypeYear <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"hpmsvtypeyear")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("yearID","VMTGrowthFactor", "HPMSBaseYearVMT"),"hpmsvtypeyear",c("hpmsvtype"),c("HPMSVTypeID"))))
}
getIMCoverage <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"imcoverage")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("yearID","inspectFreq","IMProgramID", "begModelYearID", "endModelYearID", "useIMyn", "complianceFactor"),"imcoverage",c("pollutantprocessassoc","state", "county", "sourceusetype", "fueltype", "imteststandards"),c("polProcessID","stateID","countyID", "sourceTypeID", "fuelTypeID", "testStandardsID"),c("pollutantprocessassoc","pollutantprocessassoc"),c("pollutant","emissionprocess"),c("pollutantID","processID"))))
}
getMonth <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"month")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("monthvmtfraction","yearid as year","ageid as age","modelyearid as modelyear", "idlemonthhours", "apumonthhours"),"month",c("monthofanyyear","sourceusetype"),c("monthid","sourcetypeid"))))
}
getMonthVMTFraction <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"monthvmtfraction")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("monthVMTFraction"),"monthvmtfraction",c("monthofanyyear","sourceusetype"),c("monthID","sourceTypeID"))))
}
getOnRoadRetrofit <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"onroadretrofit")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("retrofitYearID", "beginModelYearID", "endModelYearID", "cumFractionRetrofit", "retrofitEffectiveFraction"),"onroadretrofit",c("pollutant","emissionprocess","fueltype","sourceusetype"),c("pollutantID","processID","fuelTypeID","sourceTypeID"))))
}
getOpModeDistribution <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"opmodedistribution")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("linkID","opModeFraction", "opModeFractionCV"),"opmodedistribution",c("hourday","pollutantprocessassoc","roadtype","sourceusetype"),c("hourDayID","polProcessID","opModeID","sourceTypeID"),c("hourday","pollutantprocessassoc","pollutantprocessassoc"),c("dayofanyweek","pollutant","emissionprocess"),c("dayID","pollutantID","processID"))))
}
getRoadTypeDistribution <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"roadtypedistribution")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("roadTypeVMTFraction"),"roadtypedistribution",c("roadtype","sourceusetype"),c("roadTypeID","sourceTypeID"))))
}
getSourceTypeAgeDistribution <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"sourcetypeagedistribution")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("yearID", "ageFraction"),"sourcetypeagedistribution",c("agecategory","sourceusetype"),c("ageID","sourceTypeID"))))
}
getSourceTypeDayVMT <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"sourcetypedayVMT")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("yearID", "VMT"),"sourcetypedayVMT",c("dayofanyweek","monthofanyyear","sourceusetype"),c("dayID","monthID", "sourceTypeID"))))
}
getSourceTypeYear <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"sourcetypeyear")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("yearID", "salesGrowthFactor", "sourceTypePopulation", "migrationrate"),"sourcetypeyear",c("sourceusetype"),c("sourceTypeID"))))
}
getSourceTypeYearVMT <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"sourcetypeyearVMT")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("yearID", "VMT"),"sourcetypeyearVMT",c("sourceusetype"),c("sourceTypeID"))))
}
getStartsSourceTypeFraction <- function(dbconn, movesdb_name, countydb_name) {
if(!checkDatabase(dbconn, movesdb_name, countydb_name)) { return(FALSE) }
if(!checkTable(dbconn, countydb_name,"startssourcetypefraction")) { return(FALSE) }
return (processGetQuery(dbconn, queryBuilder(movesdb_name,countydb_name,c("allocationFraction"),"startssourcetypefraction",c("sourceusetype"),c("sourceTypeID"))))
}
#output tables
getActivityType <- function(dbconn, movesdb_name, outputdb_name) {
if(!checkDatabase(dbconn, movesdb_name, outputdb_name)) { return(FALSE) }
if(!checkTable(dbconn, outputdb_name, "activitytype")) { return(FALSE) }
return(processGetQuery(dbconn,queryBuilder(movesdb_name,outputdb_name,c("activityTypeID", "activityType", "activityTypeDesc"),"activitytype")))
}
getBaseRateOutput <- function(dbconn, movesdb_name, outputdb_name) {
if(!checkDatabase(dbconn, movesdb_name, outputdb_name)) { return(FALSE) }
if(!checkTable(dbconn, outputdb_name, "baserateoutput")) { return(FALSE) }
return(processGetQuery(dbconn,queryBuilder(movesdb_name,outputdb_name,c("MOVESRunID","iterationID","yearID","linkID","SCC","modelYearID","meanBaseRate","emissionRate"),"baserateoutput",c("monthofanyyear","hourday","sourceusetype","regulatoryclass","fueltype","roadtype","avgspeedbin"),c("monthID","hourDayID","sourceTypeID","regClassID","fuelTypeID","roadTypeID","avgSpeedBinID"),c("hourday","sourceusetype"),c("dayofanyweek","hpmsvtype"),c("dayID","HPMSVtypeID"))))
}
getBaseRateUnits <- function(dbconn, movesdb_name, outputdb_name) {
if(!checkDatabase(dbconn, movesdb_name, outputdb_name)) { return(FALSE) }
if(!checkTable(dbconn, outputdb_name, "baserateunits")) { return(FALSE) }
return(processGetQuery(dbconn,queryBuilder(movesdb_name,outputdb_name,c("MOVESRunID","meanBaseRateUnitsNumerator","meanBaseRateUnitsDenominator","emissionBaseRateUnitsNumerator","emissionBaseRateUnitsDenominator"),"baserateunits",c("pollutant","emissionprocess"),c("pollutantID","processID"))))
}
getMOVESActivityOutput <- function(dbconn, movesdb_name, outputdb_name) {
if(!checkDatabase(dbconn, movesdb_name, outputdb_name)) { return(FALSE) }
if(!checkTable(dbconn, outputdb_name, "movesactivityoutput")) { return(FALSE) }
return(processGetQuery(dbconn,queryBuilder(movesdb_name,outputdb_name,c("MOVESRunID","iterationID","yearID","hourID","zoneID","linkID","modelYearID","SCC","hpID","activityTypeID","activity","activityMean","activitySigma"),"movesactivityoutput",c("dayofanyweek","state","county","sourceusetype","regulatoryclass","fueltype","roadtype","enginetech","sector"),c("dayID","stateID","countyID","sourceTypeID","regClassID","fuelTypeID","roadTypeID","engTechID","sectorID"),c("sourceusetype"),c("hpmsvtype"),c("HPMSVtypeID"))))
}
getMOVESError <- function(dbconn, movesdb_name, outputdb_name) {
if(!checkDatabase(dbconn, movesdb_name, outputdb_name)) { return(FALSE) }
if(!checkTable(dbconn, outputdb_name, "moveserror")) { return(FALSE) }
return(processGetQuery(dbconn,queryBuilder(movesdb_name,outputdb_name,c("MOVESErrorID","MOVESRunID","yearID","hourID","zoneID","linkID","errorMessage"),"moveserror",c("monthofanyyear","dayofanyweek","state","county","pollutant","emissionprocess"),c("monthID","dayID","stateID","countyID","pollutantID","processID"))))
}
getMOVESEventLog <- function(dbconn, movesdb_name, outputdb_name) {
if(!checkDatabase(dbconn, movesdb_name, outputdb_name)) { return(FALSE) }
if(!checkTable(dbconn, outputdb_name, "moveseventlog")) { return(FALSE) }
return(processGetQuery(dbconn,queryBuilder(movesdb_name,outputdb_name,c("EventRecordID","MOVESRunID","EventName","WhenStarted","WhenStopped","Duration"),"moveseventlog")))
}
getMOVESOutput <- function(dbconn, movesdb_name, outputdb_name) {
if(!checkDatabase(dbconn, movesdb_name, outputdb_name)) { return(FALSE) }
if(!checkTable(dbconn, outputdb_name, "movesoutput")) { return(FALSE) }
r <- processGetQuery(dbconn,queryBuilder(movesdb_name,outputdb_name,
c("MOVESRunID","iterationID","yearID","hourID","zoneID","linkID","modelYearID","SCC","hpID","emissionQuant","emissionQuantMean","emissionQuantSigma"),
"movesoutput",
c("dayofanyweek","monthofanyyear","pollutant","state","county","sourceusetype","regulatoryclass","fueltype","fuelsubtype","roadtype","enginetech","sector"),
c("dayID","monthID","pollutantID","stateID","countyID","sourceTypeID","regClassID","fuelTypeID","fuelSubTypeID","roadTypeID","engTechID","sectorID"),
c("sourceusetype"),c("hpmsvtype"),
c("HPMSVtypeID")))
r$weekdaysInMonth = mapply(noWeekDays, as.Date(paste(r$yearID,r$monthID,"01",sep='-')),as.Date(paste(r$yearID,r$monthID,r$noOfDays,sep='-')))
r$weekenddaysInMonth = r$noOfDays-r$weekdaysInMonth
return(r)
}
getMOVESRun <- function(dbconn, movesdb_name, outputdb_name) {
if(!checkDatabase(dbconn, movesdb_name, outputdb_name)) { return(FALSE) }
if(!checkTable(dbconn, outputdb_name, "movesrun")) { return(FALSE) }
return(processGetQuery(dbconn,queryBuilder(movesdb_name,outputdb_name,c("MOVESRunID", "outputTimePeriod", "timeUnits", "distanceUnits", "massUnits", "energyUnits", "runSpecFileName", "runSpecDescription", "runSpecFileDateTime", "runDateTime", "scale", "minutesDuration", "defaultDatabaseUsed", "masterVersion", "masterComputerID", "masterIDNumber", "domain", "domainCountyID", "domainCountyName", "domainDatabaseServer", "domainDatabaseName", "expectedDONEFiles", "retrievedDONEFiles", "models"),"movesrun")))
}
getMOVESTablesUsed <- function(dbconn, movesdb_name, outputdb_name) {
if(!checkDatabase(dbconn, movesdb_name, outputdb_name)) { return(FALSE) }
if(!checkTable(dbconn, outputdb_name, "movestablesused")) { return(FALSE) }
return(processGetQuery(dbconn,queryBuilder(movesdb_name,outputdb_name,c("MOVESRunID", "databaseServer", "databaseName", "tableName", "dataFileSize", "dataFileModificationDate", "tableUseSequence"),"movestablesused")))
}
getMOVESWorkersUsed <- function(dbconn, movesdb_name, outputdb_name) {
if(!checkDatabase(dbconn, movesdb_name, outputdb_name)) { return(FALSE) }
if(!checkTable(dbconn, outputdb_name, "movesworkersused")) { return(FALSE) }
return(processGetQuery(dbconn,queryBuilder(movesdb_name,outputdb_name,c("MOVESRunID", "workerVersion", "workerComputerID", "workerID", "bundleCount", "failedBundleCount"),"movesworkersused")))
}
getRatePerDistance <- function(dbconn, movesdb_name, outputdb_name) {
if(!checkDatabase(dbconn, movesdb_name, outputdb_name)) { return(FALSE) }
if(!checkTable(dbconn, outputdb_name, "rateperdistance")) { return(FALSE) }
return(processGetQuery(dbconn,queryBuilder(movesdb_name,outputdb_name,c("MOVESScenarioID","MOVESRunID","yearID","hourID","linkID","SCC","modelYearID","temperature","relHumidity","ratePerDistance"),"rateperdistance",c("monthofanyyear","dayofanyweek","sourceusetype","regulatoryclass","fueltype","roadtype","avgspeedbin","pollutant","emissionprocess"),c("monthID","dayID","sourceTypeID","regClassID","fuelTypeID","roadTypeID","avgSpeedBinID","pollutantID","processID"),c("sourceusetype"),c("hpmsvtype"),c("HPMSVtypeID"))))
}
getRatePerHour <- function(dbconn, movesdb_name, outputdb_name) {
if(!checkDatabase(dbconn, movesdb_name, outputdb_name)) { return(FALSE) }
if(!checkTable(dbconn, outputdb_name, "rateperhour")) { return(FALSE) }
return(processGetQuery(dbconn,queryBuilder(movesdb_name,outputdb_name,c("MOVESScenarioID","MOVESRunID","yearID","hourID","linkID","SCC","modelYearID","temperature","relHumidity","ratePerHour"),"rateperhour",c("monthofanyyear","dayofanyweek","sourceusetype","regulatoryclass","fueltype","roadtype","pollutant","emissionprocess"),c("monthID","dayID","sourceTypeID","regClassID","fuelTypeID","roadTypeID","pollutantID","processID"),c("sourceusetype"),c("hpmsvtype"),c("HPMSVtypeID"))))
}
getRatePerProfile <- function(dbconn, movesdb_name, outputdb_name) {
if(!checkDatabase(dbconn, movesdb_name, outputdb_name)) { return(FALSE) }
if(!checkTable(dbconn, outputdb_name, "rateperprofile")) { return(FALSE) }
return(processGetQuery(dbconn,queryBuilder(movesdb_name,outputdb_name,c("MOVESScenarioID","MOVESRunID","yearID","hourID","SCC","modelYearID","temperature","relHumidity","ratePerVehicle"),"rateperprofile",c("temperatureprofileid","dayofanyweek","sourceusetype","regulatoryclass","fueltype","pollutant","emissionprocess"),c("temperatureProfileID","dayID","sourceTypeID","regClassID","fuelTypeID","pollutantID","processID"),c("sourceusetype"),c("hpmsvtype"),c("HPMSVtypeID"))))
}
getRatePerStart <- function(dbconn, movesdb_name, outputdb_name) {
if(!checkDatabase(dbconn, movesdb_name, outputdb_name)) { return(FALSE) }
if(!checkTable(dbconn, outputdb_name, "rateperstart")) { return(FALSE) }
return(processGetQuery(dbconn,queryBuilder(movesdb_name,outputdb_name,c("MOVESScenarioID","MOVESRunID","yearID","hourID","zoneID","SCC","modelYearID","temperature","relHumidity","ratePerStart"),"rateperstart",c("monthofanyyear","dayofanyweek","sourceusetype","regulatoryclass","fueltype","pollutant","emissionprocess"),c("monthID","dayID","sourceTypeID","regClassID","fuelTypeID","pollutantID","processID"),("sourceusetype"),c("hpmsvtype"),c("HPMSVtypeID"))))
}
getRatePerVehicle <- function(dbconn, movesdb_name, outputdb_name) {
if(!checkDatabase(dbconn, movesdb_name, outputdb_name)) { return(FALSE) }
if(!checkTable(dbconn, outputdb_name, "ratepervehicle")) { return(FALSE) }
return(processGetQuery(dbconn,queryBuilder(movesdb_name,outputdb_name,c("MOVESScenarioID","MOVESRunID","yearID","hourID","zoneID","SCC","modelYearID","temperature","relHumidity","ratePerVehicle"),"ratepervehicle",c("monthofanyyear","dayofanyweek","sourceusetype","regulatoryclass","fueltype","pollutant","emissionprocess"),c("monthID","dayID","sourceTypeID","regClassID","fuelTypeID","pollutantID","processID"),c("sourceusetype"),c("hpmsvtype"),c("HPMSVtypeID"))))
}
getStartsPerVehicle <- function(dbconn, movesdb_name, outputdb_name) {
if(!checkDatabase(dbconn, movesdb_name, outputdb_name)) { return(FALSE) }
if(!checkTable(dbconn, outputdb_name, "startspervehicle")) { return(FALSE) }
return(processGetQuery(dbconn,queryBuilder(movesdb_name,outputdb_name,c("MOVESScenarioID","MOVESRunID","yearID","hourID","zoneID","SCC","modelYearID","startsPerVehicle"),"startspervehicle",c("monthofanyyear","dayofanyweek","sourceusetype","regulatoryclass","fueltype"),c("monthID","dayID","sourceTypeID","regClassID","fuelTypeID"),c("sourceusetype"),c("hpmsvtype"),c("HPMSVtypeID"))))
}
library(r4moves)
library(r4moves)
library(r4moves)
library(r4moves)
source('~/.active-rstudio-document', echo=TRUE)
setwd('C:\\Users\\joseph.jakuta\\Documents\\GitHub\\R-for-MOVES')
devtools::document()
devtools::install()
install.packages("devtoops")
install.packages("devtools")
devtools::document()
devtools::install()
library(r4moves)
library(r4moves)
library(r4moves)
library(r4moves)
library(r4moves)
library(r4moves)
library(r4moves)
library(r4moves)
library(r4moves)
library(r4moves)
setwd('C:\\Users\\joseph.jakuta\\Documents\\GitHub\\R-for-MOVES')
devtools::document()
devtools::install()
library(r4moves)
library(r4moves)
devtools::document()
library(r4moves)
dbconn <- makeDBConnection(user = 'root', password=password)
password <- 'password'
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out - Copy")
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out - Copy", "movesrun")
movesdb_name <- 'movesdb20181022'
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out - Copy", "movesrun")
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out - Copy", "movesrun")
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
password <- 'password'
movesdb_name <- 'movesdb20181022'
countydb_name <- 'c11001y2016_20180906_2016clrp'
outputdb_name <- 'c11001y2017_2016clrp_out'
library(r4moves)
moves_location <- "C:\\Users\\Public\\EPA\\MOVES\\MOVES2014b"
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
library(r4moves)
password <- 'password'
movesdb_name <- 'movesdb20181022'
countydb_name <- 'c11001y2016_20180906_2016clrp'
outputdb_name <- 'c11001y2017_2016clrp_out'
moves_location <- "C:\\Users\\Public\\EPA\\MOVES\\MOVES2014b"
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
library(r4moves)
password <- 'password'
movesdb_name <- 'movesdb20181022'
countydb_name <- 'c11001y2016_20180906_2016clrp'
outputdb_name <- 'c11001y2017_2016clrp_out'
moves_location <- "C:\\Users\\Public\\EPA\\MOVES\\MOVES2014b"
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
print(max_id[[0]])
RMySQL::fetch(RMySQL::dbSendQuery(dbconn, paste("SELECT `AUTO_INCREMENT` FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '",outputdb_name,"' AND TABLE_NAME = 'movesrun';", sep="")))
max_id <- RMySQL::fetch(RMySQL::dbSendQuery(dbconn, paste("SELECT `AUTO_INCREMENT` FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '",outputdb_name,"' AND TABLE_NAME = 'movesrun';", sep="")))
print(max_id[[0]])
max_id <- RMySQL::fetch(RMySQL::dbSendQuery(dbconn, paste("SELECT `AUTO_INCREMENT` FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '",outputdb_name,"' AND TABLE_NAME = 'movesrun';", sep="")))
print(max_id[0])
max_id <- RMySQL::fetch(RMySQL::dbSendQuery(dbconn, paste("SELECT `AUTO_INCREMENT` FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '",outputdb_name,"' AND TABLE_NAME = 'movesrun';", sep="")))
print(max_id[0][0])
max_id <- RMySQL::fetch(RMySQL::dbSendQuery(dbconn, paste("SELECT `AUTO_INCREMENT` FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '",outputdb_name,"' AND TABLE_NAME = 'movesrun';", sep="")))
print(max_id[][0])
print(max_id)
print(max_id['AUTO_INCREMENT'])
print(max_id['AUTO_INCREMENT'][0])
print(max_id['AUTO_INCREMENT'][1])
print(int(max_id['AUTO_INCREMENT'][1]))
print(as.int(max_id['AUTO_INCREMENT'][1]))
print(as.integer(max_id['AUTO_INCREMENT'][1]))
print(as.integer(max_id['AUTO_INCREMENT'][1])+1)
print(as.string(as.integer(max_id['AUTO_INCREMENT'][1])+1))
print(as.character(as.integer(max_id['AUTO_INCREMENT'][1])+1))
library(r4moves)
password <- 'password'
movesdb_name <- 'movesdb20181022'
moves_location <- "C:\\Users\\Public\\EPA\\MOVES\\MOVES2014b"
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
library(r4moves)
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
library(r4moves)
password <- 'password'
movesdb_name <- 'movesdb20181022'
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
renumberMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
renumberMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 8, 6)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
max_id <- RMySQL::fetch(RMySQL::dbSendQuery(dbconn, paste("SELECT `AUTO_INCREMENT` FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '","dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c","' AND TABLE_NAME = 'movesrun';", sep="")))
print(as.character(as.integer(max_id['AUTO_INCREMENT'][1])+1))
max_id
password <- 'password'
movesdb_name <- 'movesdb20181022'
library(r4moves)
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
renumberMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 8, 6)
library(r4moves)
password <- 'password'
movesdb_name <- 'movesdb20181022'
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
password <- 'password'
movesdb_name <- 'movesdb20181022'
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
renumberMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 8, 6)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
library(r4moves)
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
library(r4moves)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
renumberMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 8, 6)
renumberMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 7, 5)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
renumberMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 7, 5)
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
renumberMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 7, 5)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
renumberMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6, 5)
RMySQL::fetch(RMySQL::dbSendQuery(dbconn, paste("select * from ","dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c",".movesrun WHERE MOVESRunID = ", 7, sep="")))
RMySQL::fetch(RMySQL::dbSendQuery(dbconn, paste("select * from ","dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c",".movesrun WHERE MOVESRunID = ", 7, sep="")))
RMySQL::dbSendQuery(dbconn, paste("select * from ","dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c",".movesrun WHERE MOVESRunID = ", 7, sep=""))
max_id <- RMySQL::fetch(RMySQL::dbSendQuery(dbconn, paste("select * from ","dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c",".movesrun WHERE MOVESRunID = ", 7, sep="")))
max_id
max_id <- RMySQL::fetch(RMySQL::dbSendQuery(dbconn, paste("select * from ","dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c",".movesrun WHERE MOVESRunID = ", 7, sep="")))
dbconn <- makeDBConnection(user = 'root', password=password)
max_id <- RMySQL::fetch(RMySQL::dbSendQuery(dbconn, paste("select * from ","dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c",".movesrun WHERE MOVESRunID = ", 7, sep="")))
max_id
nrow(max_id)
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
max_id <- RMySQL::fetch(RMySQL::dbSendQuery(dbconn, paste("select * from ","dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c",".movesrun WHERE MOVESRunID = ", 7, sep="")))
nrow(max_id)
max_id <- RMySQL::fetch(RMySQL::dbSendQuery(dbconn, paste("select * from ","dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c",".movesrun WHERE MOVESRunID = ", 6, sep="")))
nrow(max_id)
nrow(max_id) == 0
max_id <- RMySQL::fetch(RMySQL::dbSendQuery(dbconn, paste("select * from ","dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c",".movesrun WHERE MOVESRunID = ", 7, sep="")))
nrow(max_id) == 0
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 9)
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 7)
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 7)
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
deleteMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
renumberMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 6, 5)
renumberMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 7, 5)
renumberMOVESRun(dbconn, "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", 7, 6)
getMOVESOutputTable(dbconn, movesdb_name , "dc_imsip_v45_2020_amnd_ozn_dc_2025_out_c", "movesrun")
library(r4moves)
library(r4moves)
library(r4moves)
setwd('C:\\Users\\joseph.jakuta\\Documents\\GitHub\\R-for-MOVES')
devtools::document()
devtools::install()
library(r4moves)
