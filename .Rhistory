devtools::document()
setwd('..')
Run devtools::document()
Run devtools::install()
setwd('..')
devtools::document()
devtools::install()
devtools::install()
setwd('..')
devtools::document()
setwd('C:\Users\joseph.jakuta\Documents\r4moves')
setwd('C:\\Users\\joseph.jakuta\\Documents\\r4moves')
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
movesDBversions <- c(c("movesdb20161117", FALSE),
c("movesdb20180517", TRUE),
c("movesdb20181022", FALSE))
db_name <- test
db_name <- "test"
warning <- "Database appears to be a MOVES database, but this database has not yet been implemement in r4moves."
for(mdbv in movesDBversions) {
if(mdbv[0] == db_name) {
warning <- ifelse(mdbv[1], "x", "Database is confirmed to be MOVES database, but this database has not yet been tested in r4moves.")
}
}
movesDBversions <- array(c("movesdb20161117", FALSE),
c("movesdb20180517", TRUE),
c("movesdb20181022", FALSE))
c("movesdb20181022", FALSE))
movesDBversions <- array(c(c("movesdb20161117", FALSE),
c("movesdb20180517", TRUE),
c("movesdb20181022", FALSE)))
movesDBversions <- array(c(c("movesdb20161117", FALSE),
c("movesdb20180517", TRUE),
c("movesdb20181022", FALSE)), c(3,2))
movesDBversions
movesDBversions <- array(c(c("movesdb20161117", FALSE),
c("movesdb20180517", TRUE),
c("movesdb20181022", FALSE)),
c(2,3))
movesDBversions
movesDBversions <- array(c(c("movesdb20161117", "movesdb20180517", "movesdb20181022"),
c(FALSE, TRUE, FALSE)),
c(2,3))
movesDBversions
movesDBversions <- array(c(c("movesdb20161117", "movesdb20180517", "movesdb20181022"),
c(FALSE, TRUE, FALSE)),
c(3,2))
movesDBversions
for(mdbv in movesDBversions) {
if(mdbv[0] == db_name) {
warning <- ifelse(mdbv[1], "x", "Database is confirmed to be MOVES database, but this database has not yet been tested in r4moves.")
}
}
for(mdbv in movesDBversions) {
if(mdbv[0] == db_name) {
warning <- ifelse(mdbv[1], "x", "Database is confirmed to be MOVES database, but this database has not yet been tested in r4moves.")
}
}
movesDBversions
for(row in 1:nrow(movesDBversions)) {
if(movesDBversions[row, 1] == db_name) {
warning <- ifelse(as.boolean(movesDBversions[row, 2]), "x", "Database is confirmed to be MOVES database, but this database has not yet been tested in r4moves.")
}
}
warning <- "Database Xappears to be a MOVES database, but this database has not yet been implememented or tested in r4moves."
for(row in 1:nrow(movesDBversions)) {
if(movesDBversions[row, 1] == db_name) {
warning <- ifelse(as.boolean(movesDBversions[row, 2]), "x", "Database is confirmed to be MOVES database, but this database has not yet been tested in r4moves.")
}
}
db_name <- "test"
if(grepl("^movesdb", db_name)) {
warning <- "Database Xappears to be a MOVES database, but this database has not yet been implememented or tested in r4moves."
for(row in 1:nrow(movesDBversions)) {
if(movesDBversions[row, 1] == db_name) {
warning <- ifelse(as.boolean(movesDBversions[row, 2]), "x", "Database is confirmed to be MOVES database, but this database has not yet been tested in r4moves.")
}
}
}
warning <- ""
if(grepl("^movesdb", db_name)) {
warning <- "Database Xappears to be a MOVES database, but this database has not yet been implememented or tested in r4moves."
for(row in 1:nrow(movesDBversions)) {
if(movesDBversions[row, 1] == db_name) {
warning <- ifelse(as.boolean(movesDBversions[row, 2]), "x", "Database is confirmed to be MOVES database, but this database has not yet been tested in r4moves.")
}
}
}
db_name <- "movesdb"
if(grepl("^movesdb", db_name)) {
warning <- "Database Xappears to be a MOVES database, but this database has not yet been implememented or tested in r4moves."
for(row in 1:nrow(movesDBversions)) {
if(movesDBversions[row, 1] == db_name) {
warning <- ifelse(as.boolean(movesDBversions[row, 2]), "x", "Database is confirmed to be MOVES database, but this database has not yet been tested in r4moves.")
}
}
}
db_name <- "movesdb20161117"
if(grepl("^movesdb", db_name)) {
warning <- "Database Xappears to be a MOVES database, but this database has not yet been implememented or tested in r4moves."
for(row in 1:nrow(movesDBversions)) {
if(movesDBversions[row, 1] == db_name) {
warning <- ifelse(as.boolean(movesDBversions[row, 2]), "x", "Database is confirmed to be MOVES database, but this database has not yet been tested in r4moves.")
}
}
}
if(grepl("^movesdb", db_name)) {
warning <- "Database Xappears to be a MOVES database, but this database has not yet been implememented or tested in r4moves."
for(row in 1:nrow(movesDBversions)) {
if(movesDBversions[row, 1] == db_name) {
warning <- ifelse(as.bool(movesDBversions[row, 2]), "x", "Database is confirmed to be MOVES database, but this database has not yet been tested in r4moves.")
}
}
}
if(grepl("^movesdb", db_name)) {
warning <- "Database Xappears to be a MOVES database, but this database has not yet been implememented or tested in r4moves."
for(row in 1:nrow(movesDBversions)) {
if(movesDBversions[row, 1] == db_name) {
warning <- ifelse(movesDBversions[row, 2] == "TRUE", "x", "Database is confirmed to be MOVES database, but this database has not yet been tested in r4moves.")
}
}
}
db_name <- "movesdb20180517"
warning <- ""
if(grepl("^movesdb", db_name)) {
warning <- "Database Xappears to be a MOVES database, but this database has not yet been implememented or tested in r4moves."
for(row in 1:nrow(movesDBversions)) {
if(movesDBversions[row, 1] == db_name) {
warning <- ifelse(movesDBversions[row, 2] == "TRUE", "x", "Database is confirmed to be MOVES database, but this database has not yet been tested in r4moves.")
}
}
}
getBaseInputTable <- function(dbconn, movesdb_name, table_name) {
if(!checkDatabase(dbconn, movesdb_name, movesdb_name)) { return(FALSE) }
if(!checkTable(dbconn, movesdb_name, table_name)) { return(FALSE) }
return(processGetQuery(dbconn, queryBuilder(movesdb_name,movesdb_name, c("*"))))
}
library(r4moves)
library(r4moves)
library(dplyr)
library(ggplot2)
library(XML)
password <- 'K7j0Ret79TwUIjxZExbZ'
movesdb_name <- 'movesdb20180517'
countydb_name <- 'ozn_dc_2017_naaq_in'
outputdb_name <- 'ozn_dc_2017_naaq_out'
moves_location <- "C:\\Users\\Public\\EPA\\MOVES\\MOVES2014b"
dbconn <- makeDBConnection(user = 'root', password=password)
suffix <- "_scenario1"
getMOVESBaseTable(dbconn, movesdb_name, 'sourceusetype')
library(r4moves)
library(r4moves)
library(dplyr)
library(ggplot2)
library(XML)
#Written by Joseph Jakuta (DC DOEE)
#Contact joseph.jakuta@dc.gov or hlinak@gmail.com
password <- 'K7j0Ret79TwUIjxZExbZ'
movesdb_name <- 'movesdb20180517'
countydb_name <- 'ozn_dc_2017_naaq_in'
outputdb_name <- 'ozn_dc_2017_naaq_out'
moves_location <- "C:\\Users\\Public\\EPA\\MOVES\\MOVES2014b"
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESBaseTable(dbconn, movesdb_name, 'sourceusetype')
library(r4moves)
library(r4moves)
library(dplyr)
library(ggplot2)
library(XML)
#Written by Joseph Jakuta (DC DOEE)
#Contact joseph.jakuta@dc.gov or hlinak@gmail.com
password <- 'K7j0Ret79TwUIjxZExbZ'
movesdb_name <- 'movesdb20180517'
countydb_name <- 'ozn_dc_2017_naaq_in'
outputdb_name <- 'ozn_dc_2017_naaq_out'
moves_location <- "C:\\Users\\Public\\EPA\\MOVES\\MOVES2014b"
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESBaseTable(dbconn, movesdb_name, 'sourceusetype')
library(r4moves)
library(r4moves)
library(dplyr)
library(ggplot2)
library(XML)
password <- 'K7j0Ret79TwUIjxZExbZ'
movesdb_name <- 'movesdb20180517'
countydb_name <- 'ozn_dc_2017_naaq_in'
outputdb_name <- 'ozn_dc_2017_naaq_out'
moves_location <- "C:\\Users\\Public\\EPA\\MOVES\\MOVES2014b"
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESBaseTable(dbconn, movesdb_name, 'sourceusetype')
library(r4moves)
getMOVESBaseTable(dbconn, movesdb_name, 'sourceusetype')
library(r4moves)
library(dplyr)
library(ggplot2)
library(XML)
#Written by Joseph Jakuta (DC DOEE)
#Contact joseph.jakuta@dc.gov or hlinak@gmail.com
password <- 'K7j0Ret79TwUIjxZExbZ'
movesdb_name <- 'movesdb20180517'
countydb_name <- 'ozn_dc_2017_naaq_in'
outputdb_name <- 'ozn_dc_2017_naaq_out'
moves_location <- "C:\\Users\\Public\\EPA\\MOVES\\MOVES2014b"
dbconn <- makeDBConnection(user = 'root', password=password)
getMOVESBaseTable(dbconn, movesdb_name, 'sourceusetype')
library(r4moves)
library(r4moves)
library(r4moves)
library(r4moves)
library(dplyr)
library(ggplot2)
library(XML)
password <- 'K7j0Ret79TwUIjxZExbZ'
movesdb_name <- 'movesdb20180517'
countydb_name <- 'ozn_dc_2017_naaq_in'
outputdb_name <- 'ozn_dc_2017_naaq_out'
password <- 'password'
movesdb_name <- 'movesdb20181022'
countydb_name <- 'c11001y2016_20180906_2016clrp'
outputdb_name <- 'c11001y2017_2016clrp_out'
moves_location <- "C:\\Users\\Public\\EPA\\MOVES\\MOVES2014b"
password <- 'K7j0Ret79TwUIjxZExbZ'
movesdb_name <- 'movesdb20180517'
countydb_name <- 'ozn_dc_2017_naaq_in'
outputdb_name <- 'ozn_dc_2017_naaq_out'
moves_location <- "C:\\Users\\Public\\EPA\\MOVES\\MOVES2014b"
dbconn <- makeDBConnection(user = 'root', password=password)
suffix <- "_scenario1"
new_countydb_name <- paste(countydb_name, suffix, sep="")
new_outputdb_name <- paste(outputdb_name, suffix, sep="")
copyMOVESDatabase(dbconn, countydb_name, new_countydb_name)
data <- getAverageSpeedBin(dbconn, movesdb_name, countydb_name)
replaceMOVESTable(dbconn,new_countydb_name, "avgspeeddistribution", data)
folder <- input_runspec <- "C:\\Users\\joseph.jakuta\\Desktop\\"
input_runspec <- paste(folder, "test_runspec.xml", sep='')
output_runspec <- paste(folder, "test_runspec_new.mrs", sep='')
batchfile <- paste(folder, "test_batch.bat", sep='')
rs <- readRunspec(input_runspec)
getRunspecAttr(rs, "//scaleinputdatabase", "databasename")
xmlValue(getNodeSet(runspec, "//description"))
xmlValue(getNodeSet(rs, "//description"))
folder <- input_runspec <- "test_files\\"
input_runspec <- paste(folder, "test_runspec.xml", sep='')
rs <- readRunspec(input_runspec)
getRunspecAttr(rs, "//scaleinputdatabase", "databasename")
xmlValue(getNodeSet(rs, "//description"))
library(r4moves)
library(r4moves)
library(dplyr)
library(ggplot2)
library(XML)
password <- 'K7j0Ret79TwUIjxZExbZ'
movesdb_name <- 'movesdb20180517'
countydb_name <- 'ozn_dc_2017_naaq_in'
outputdb_name <- 'ozn_dc_2017_naaq_out'
dbconn <- makeDBConnection(user = 'root', password=password)
folder <- input_runspec <- "test_files\\"
input_runspec <- paste(folder, "test_runspec.xml", sep='')
output_runspec <- paste(folder, "test_runspec_new.mrs", sep='')
batchfile <- paste(folder, "test_batch.bat", sep='')
rs <- readRunspec(input_runspec)
getRunspecAttr(rs, "//scaleinputdatabase", "databasename")
getRunspecValue(rs, "//description")
setRunspecValue(rs, "//description", "test 2")
library(r4moves)
library(r4moves)
library(dplyr)
library(ggplot2)
library(XML)
#Written by Joseph Jakuta (DC DOEE)
#Contact joseph.jakuta@dc.gov or hlinak@gmail.com
password <- 'K7j0Ret79TwUIjxZExbZ'
movesdb_name <- 'movesdb20180517'
countydb_name <- 'ozn_dc_2017_naaq_in'
outputdb_name <- 'ozn_dc_2017_naaq_out'
moves_location <- "C:\\Users\\Public\\EPA\\MOVES\\MOVES2014b"
dbconn <- makeDBConnection(user = 'root', password=password)
suffix <- "_scenario1"
folder <- input_runspec <- "test_files\\"
input_runspec <- paste(folder, "test_runspec.xml", sep='')
output_runspec <- paste(folder, "test_runspec_new.mrs", sep='')
batchfile <- paste(folder, "test_batch.bat", sep='')
rs <- readRunspec(input_runspec)
getRunspecAttr(rs, "//scaleinputdatabase", "databasename")
getRunspecValue(rs, "//description")
setRunspecValue(rs, "//description", "test 2")
xmlValue(getNodeSet(rs,"//description")) = "test 2"
xmlValue(getNodeSet(rs,"//description")) <- "test 2"
getNodeSet(rs,"//description")
xmlValue(getNodeSet(rs,"//description")
xmlValue(getNodeSet(rs,"//description"))
xmlValue(getNodeSet(rs,"//description"))
ns <- getNodeSet(rs,"//description")
lapply(ns, function(n) { XML::newXMLNode("description"newXMLNode("id", x ))})
lapply(ns, function(n) { XML::newXMLNode("description", newXMLNode("id", x ))})
lapply(ns, function(n) { XML::newXMLNode("description",  "test2" )})
ns
rs
lapply(ns, function(n) { XML::newXMLNode("description",  "test2" )})
ns
xmlValue(getNodeSet(rs,"//description")) <- lapply(ns, function(n) { XML::newXMLNode("description",  "test2" )})
getRunspecValue(rs, "//description")
xmlValue(getNodeSet(rs,"//description")) <- lapply(ns, function(n) { XML::newXMLNode("description",  "test2" )})
xmlValue(getNodeSet(rs,"//description")) <- XML::newXMLNode("description",  "test2" )
lapply(ns, function(n) {
xmlValue(getNodeSet(rs,"//description")) <- lapply(ns, function(n) { XML::newXMLNode("description",  "test2" )})
xmlValue(getNodeSet(rs,"//description")) <- lapply(ns, function(n) { XML::newXMLNode("description",  "test2" )})
xmlValue(getNodeSet(rs,"//description")) <- lapply(ns, function(n) { XML::newXMLNode("description",  "test2" )})
